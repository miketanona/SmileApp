import { useState, useEffect } from "react";

const CameraStream = () => {
  const [imageSrc, setImageSrc] = useState("");
  const [isRunning, setIsRunning] = useState(false);

  useEffect(() => {
    let interval;
    if (isRunning) {
      interval = setInterval(() => {
        setImageSrc(`http://127.0.0.1:5000/get-frame?t=${new Date().getTime()}`); // Prevent caching
      }, 1000);
    } else {
      setImageSrc(""); // Clear image when stopped
    }
    return () => clearInterval(interval);
  }, [isRunning]);

  const startCamera = async () => {
    const response = await fetch("http://127.0.0.1:5000/start-camera", { method: "POST" });
    if (response.ok) {
      setIsRunning(true);
    }
  };

  const stopCamera = async () => {
    await fetch("/http://localhost:5000/stop-camera", { method: "POST" });
    setIsRunning(false);
  };

  return (
    <div style={{ display: "flex", height: "100vh" }}>
      <div style={{ flex: 1, display: "flex", alignItems: "center", justifyContent: "center", borderRight: "2px solid gray" }}>
        {imageSrc ? <img src={imageSrc} alt="Camera Feed" width="90%" height="auto" /> : <p>No Camera Feed</p>}
      </div>
      <div style={{ flex: 1, display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center" }}>
        <button onClick={startCamera} disabled={isRunning} style={{ margin: "10px", padding: "10px 20px" }}>Start Camera</button>
        <button onClick={stopCamera} disabled={!isRunning} style={{ margin: "10px", padding: "10px 20px" }}>Stop Camera</button>
      </div>
    </div>
  );
};

export default CameraStream;
